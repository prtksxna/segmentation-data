{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/compositemark/index.ts"],"names":[],"mappings":";;AACA,gCAA2C;AAE3C,gCAA6B;AAC7B,qCAA6G;AAC7G,yCAOqB;AACrB,uCAAoH;AAOpH;;GAEG;AACH,IAAM,qBAAqB,GAKvB,EAAE,CAAC;AAEP,SAAgB,GAAG,CAAC,IAAY,EAAE,UAA0B,EAAE,KAAe;IAC3E,qBAAqB,CAAC,IAAI,CAAC,GAAG,EAAC,UAAU,YAAA,EAAE,KAAK,OAAA,EAAC,CAAC;AACpD,CAAC;AAFD,kBAEC;AAED,SAAgB,MAAM,CAAC,IAAY;IACjC,OAAO,qBAAqB,CAAC,IAAI,CAAC,CAAC;AACrC,CAAC;AAFD,wBAEC;AAID,SAAgB,oBAAoB;IAClC,OAAO,WAAI,CAAC,qBAAqB,CAAC,CAAC;AACrC,CAAC;AAFD,oDAEC;AAED,SAAgB,qBAAqB,CAAC,IAAY;IAChD,IAAI,IAAI,IAAI,qBAAqB,EAAE;QACjC,OAAO,qBAAqB,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;KAC1C;IACD,MAAM,IAAI,KAAK,CAAC,iCAA+B,IAAM,CAAC,CAAC;AACzD,CAAC;AALD,sDAKC;AAQD,GAAG,CAAC,iBAAO,EAAE,0BAAgB,EAAE,uBAAa,CAAC,CAAC;AAC9C,GAAG,CAAC,mBAAQ,EAAE,4BAAiB,EAAE,yBAAc,CAAC,CAAC;AACjD,GAAG,CAAC,qBAAS,EAAE,8BAAkB,EAAE,2BAAe,CAAC,CAAC;AAEpD;;GAEG;AACH,SAAgB,SAAS;AACvB,yHAAyH;AACzH,IAAmC,EACnC,MAAc;IAEd,IAAM,IAAI,GAAG,gBAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;IAC/D,IAAI,IAAI,IAAI,qBAAqB,EAAE;QAC1B,IAAA,mDAAU,CAAgC;QACjD,OAAO,UAAU,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;KACjC;IAED,MAAM,IAAI,KAAK,CAAC,yBAAsB,IAAI,OAAG,CAAC,CAAC;AACjD,CAAC;AAZD,8BAYC","sourcesContent":["import {Config} from '../config';\nimport {AnyMark, isMarkDef} from '../mark';\nimport {GenericUnitSpec, NormalizedLayerSpec} from '../spec';\nimport {keys} from '../util';\nimport {BOXPLOT, BoxPlot, BOXPLOT_PARTS, BoxPlotConfigMixins, BoxPlotDef, normalizeBoxPlot} from './boxplot';\nimport {\n  ERRORBAND,\n  ErrorBand,\n  ERRORBAND_PARTS,\n  ErrorBandConfigMixins,\n  ErrorBandDef,\n  normalizeErrorBand\n} from './errorband';\nimport {ERRORBAR, ErrorBar, ERRORBAR_PARTS, ErrorBarConfigMixins, ErrorBarDef, normalizeErrorBar} from './errorbar';\n\nexport {BoxPlotConfig} from './boxplot';\nexport {ErrorBandConfigMixins} from './errorband';\nexport {ErrorBarConfigMixins} from './errorbar';\nexport type UnitNormalizer = (spec: GenericUnitSpec<any, any>, config: Config) => NormalizedLayerSpec;\n\n/**\n * Registry index for all composite mark's normalizer\n */\nconst compositeMarkRegistry: {\n  [mark: string]: {\n    normalizer: UnitNormalizer;\n    parts: string[];\n  };\n} = {};\n\nexport function add(mark: string, normalizer: UnitNormalizer, parts: string[]) {\n  compositeMarkRegistry[mark] = {normalizer, parts};\n}\n\nexport function remove(mark: string) {\n  delete compositeMarkRegistry[mark];\n}\n\nexport type CompositeMark = BoxPlot | ErrorBar | ErrorBand;\n\nexport function getAllCompositeMarks() {\n  return keys(compositeMarkRegistry);\n}\n\nexport function getCompositeMarkParts(mark: string) {\n  if (mark in compositeMarkRegistry) {\n    return compositeMarkRegistry[mark].parts;\n  }\n  throw new Error(`Unregistered composite mark ${mark}`);\n}\n\nexport type CompositeMarkDef = BoxPlotDef | ErrorBarDef | ErrorBandDef;\n\nexport type CompositeAggregate = BoxPlot | ErrorBar | ErrorBand;\n\nexport interface CompositeMarkConfigMixins extends BoxPlotConfigMixins, ErrorBarConfigMixins, ErrorBandConfigMixins {}\n\nadd(BOXPLOT, normalizeBoxPlot, BOXPLOT_PARTS);\nadd(ERRORBAR, normalizeErrorBar, ERRORBAR_PARTS);\nadd(ERRORBAND, normalizeErrorBand, ERRORBAND_PARTS);\n\n/**\n * Transform a unit spec with composite mark into a normal layer spec.\n */\nexport function normalize(\n  // This GenericUnitSpec has any as Encoding because unit specs with composite mark can have additional encoding channels.\n  spec: GenericUnitSpec<any, AnyMark>,\n  config: Config\n): NormalizedLayerSpec {\n  const mark = isMarkDef(spec.mark) ? spec.mark.type : spec.mark;\n  if (mark in compositeMarkRegistry) {\n    const {normalizer} = compositeMarkRegistry[mark];\n    return normalizer(spec, config);\n  }\n\n  throw new Error(`Invalid mark type \"${mark}\"`);\n}\n"]}