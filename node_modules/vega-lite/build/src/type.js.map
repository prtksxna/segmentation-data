{"version":3,"file":"type.js","sourceRoot":"","sources":["../../src/type.ts"],"names":[],"mappings":";;AACA,4CAA4C;AAC5C,8CAA8C;AAE9C,IAAiB,IAAI,CAOpB;AAPD,WAAiB,IAAI;IACN,iBAAY,GAAmB,cAAc,CAAC;IAC9C,YAAO,GAAc,SAAS,CAAC;IAC/B,aAAQ,GAAe,UAAU,CAAC;IAClC,YAAO,GAAc,SAAS,CAAC;IAE/B,YAAO,GAAc,SAAS,CAAC;AAC9C,CAAC,EAPgB,IAAI,GAAJ,YAAI,KAAJ,YAAI,QAOpB;AASY,QAAA,UAAU,GAAe;IACpC,YAAY,EAAE,CAAC;IACf,OAAO,EAAE,CAAC;IACV,QAAQ,EAAE,CAAC;IACX,OAAO,EAAE,CAAC;IACV,OAAO,EAAE,CAAC;CACX,CAAC;AAEF,SAAgB,MAAM,CAAC,CAAM;IAC3B,OAAO,CAAC,CAAC,kBAAU,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC;AAFD,wBAEC;AAEY,QAAA,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;AACjC,QAAA,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;AACvB,QAAA,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AACzB,QAAA,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;AAEvB,QAAA,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;AAEpC;;;;GAIG;AACH,SAAgB,WAAW,CAAC,IAAmB;IAC7C,IAAI,IAAI,EAAE;QACR,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC1B,QAAQ,IAAI,EAAE;YACZ,KAAK,GAAG,CAAC;YACT,KAAK,oBAAY;gBACf,OAAO,cAAc,CAAC;YACxB,KAAK,GAAG,CAAC;YACT,KAAK,gBAAQ;gBACX,OAAO,UAAU,CAAC;YACpB,KAAK,GAAG,CAAC;YACT,KAAK,eAAO;gBACV,OAAO,SAAS,CAAC;YACnB,KAAK,GAAG,CAAC;YACT,KAAK,eAAO;gBACV,OAAO,SAAS,CAAC;YACnB,KAAK,eAAO;gBACV,OAAO,SAAS,CAAC;SACpB;KACF;IACD,kDAAkD;IAClD,OAAO,SAAS,CAAC;AACnB,CAAC;AAtBD,kCAsBC","sourcesContent":["import {Flag} from './util';\n/** Constants and utilities for data type */\n/** Data type based on level of measurement */\n\nexport namespace Type {\n  export const QUANTITATIVE: 'quantitative' = 'quantitative';\n  export const ORDINAL: 'ordinal' = 'ordinal';\n  export const TEMPORAL: 'temporal' = 'temporal';\n  export const NOMINAL: 'nominal' = 'nominal';\n\n  export const GEOJSON: 'geojson' = 'geojson';\n}\n\nexport type Type =\n  | typeof Type.QUANTITATIVE\n  | typeof Type.ORDINAL\n  | typeof Type.TEMPORAL\n  | typeof Type.NOMINAL\n  | typeof Type.GEOJSON;\n\nexport const TYPE_INDEX: Flag<Type> = {\n  quantitative: 1,\n  ordinal: 1,\n  temporal: 1,\n  nominal: 1,\n  geojson: 1\n};\n\nexport function isType(t: any): t is Type {\n  return !!TYPE_INDEX[t];\n}\n\nexport const QUANTITATIVE = Type.QUANTITATIVE;\nexport const ORDINAL = Type.ORDINAL;\nexport const TEMPORAL = Type.TEMPORAL;\nexport const NOMINAL = Type.NOMINAL;\n\nexport const GEOJSON = Type.GEOJSON;\n\n/**\n * Get full, lowercase type name for a given type.\n * @param  type\n * @return Full type name.\n */\nexport function getFullName(type: Type | string): Type {\n  if (type) {\n    type = type.toLowerCase();\n    switch (type) {\n      case 'q':\n      case QUANTITATIVE:\n        return 'quantitative';\n      case 't':\n      case TEMPORAL:\n        return 'temporal';\n      case 'o':\n      case ORDINAL:\n        return 'ordinal';\n      case 'n':\n      case NOMINAL:\n        return 'nominal';\n      case GEOJSON:\n        return 'geojson';\n    }\n  }\n  // If we get invalid input, return undefined type.\n  return undefined;\n}\n"]}