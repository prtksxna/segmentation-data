{"version":3,"file":"encode.js","sourceRoot":"","sources":["../../../../src/compile/legend/encode.ts"],"names":[],"mappings":"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","sourcesContent":["import {SymbolEncodeEntry} from 'vega';\nimport {isArray} from 'vega-util';\nimport {Channel, COLOR, NonPositionScaleChannel, OPACITY, SHAPE} from '../../channel';\nimport {\n  Conditional,\n  FieldDef,\n  FieldDefWithCondition,\n  hasConditionalValueDef,\n  isTimeFieldDef,\n  isValueDef,\n  MarkPropFieldDef,\n  ValueDef,\n  ValueDefWithCondition\n} from '../../fielddef';\nimport {AREA, BAR, CIRCLE, FILL_STROKE_CONFIG, GEOSHAPE, LINE, POINT, SQUARE, TEXT, TICK} from '../../mark';\nimport {ScaleType} from '../../scale';\nimport {getFirstDefined, keys} from '../../util';\nimport {applyMarkConfig, timeFormatExpression} from '../common';\nimport * as mixins from '../mark/mixins';\nimport {UnitModel} from '../unit';\nimport {LegendComponent} from './component';\n\nexport function symbols(\n  fieldDef: FieldDef<string>,\n  symbolsSpec: any,\n  model: UnitModel,\n  channel: Channel,\n  legendCmp: LegendComponent\n): SymbolEncodeEntry {\n  if (legendCmp.get('type') === 'gradient') {\n    return undefined;\n  }\n\n  let out = {\n    ...applyMarkConfig({}, model, FILL_STROKE_CONFIG),\n    ...mixins.color(model)\n  } as SymbolEncodeEntry; // FIXME: remove this when VgEncodeEntry is compatible with SymbolEncodeEntry\n\n  switch (model.mark) {\n    case BAR:\n    case TICK:\n    case TEXT:\n      out.shape = {value: 'square'};\n      break;\n    case CIRCLE:\n    case SQUARE:\n      out.shape = {value: model.mark};\n      break;\n    case POINT:\n    case LINE:\n    case GEOSHAPE:\n    case AREA:\n      // use default circle\n      break;\n  }\n\n  const {markDef, encoding} = model;\n  const filled = markDef.filled;\n\n  const opacity = getMaxValue(encoding.opacity) || markDef.opacity;\n\n  if (out.fill) {\n    // for fill legend, we don't want any fill in symbol\n    if (channel === 'fill' || (filled && channel === COLOR)) {\n      delete out.fill;\n    } else {\n      if (out.fill['field']) {\n        // For others, set fill to some opaque value (or nothing if a color is already set)\n        if (legendCmp.get('symbolFillColor')) {\n          delete out.fill;\n        } else {\n          out.fill = {value: 'black'};\n          out.fillOpacity = {value: opacity || 1};\n        }\n      } else if (isArray(out.fill)) {\n        const fill =\n          (getFirstConditionValue(encoding.fill || encoding.color) as string) ||\n          markDef.fill ||\n          (filled && markDef.color);\n        if (fill) {\n          out.fill = {value: fill};\n        }\n      }\n    }\n  }\n\n  if (out.stroke) {\n    if (channel === 'stroke' || (!filled && channel === COLOR)) {\n      delete out.stroke;\n    } else {\n      if (out.stroke['field']) {\n        // For others, remove stroke field\n        delete out.stroke;\n      } else if (isArray(out.stroke)) {\n        const stroke = getFirstDefined(\n          getFirstConditionValue(encoding.stroke || encoding.color) as string,\n          markDef.stroke,\n          filled ? markDef.color : undefined\n        );\n        if (stroke) {\n          out.stroke = {value: stroke};\n        }\n      }\n    }\n  }\n\n  if (out.fill && out.fill['value'] !== 'transparent' && !out.stroke) {\n    // for non color channel's legend, we need to override symbol stroke config from Vega config\n    out.stroke = {value: 'transparent'};\n  }\n\n  if (channel !== SHAPE) {\n    const shape = (getFirstConditionValue(encoding.shape) as string) || markDef.shape;\n    if (shape) {\n      out.shape = {value: shape};\n    }\n  }\n\n  if (channel !== OPACITY) {\n    if (opacity) {\n      // only apply opacity if it is neither zero or undefined\n      out.opacity = {value: opacity};\n    }\n  }\n\n  out = {...out, ...symbolsSpec};\n\n  return keys(out).length > 0 ? out : undefined;\n}\n\nexport function gradient(\n  fieldDef: FieldDef<string>,\n  gradientSpec: any,\n  model: UnitModel,\n  channel: Channel,\n  legendCmp: LegendComponent\n) {\n  let out: SymbolEncodeEntry = {};\n\n  if (legendCmp.get('type') === 'gradient') {\n    const opacity = getMaxValue(model.encoding.opacity) || model.markDef.opacity;\n    if (opacity) {\n      // only apply opacity if it is neither zero or undefined\n      out.opacity = {value: opacity};\n    }\n  }\n\n  out = {...out, ...gradientSpec};\n  return keys(out).length > 0 ? out : undefined;\n}\n\nexport function labels(\n  fieldDef: FieldDef<string>,\n  labelsSpec: any,\n  model: UnitModel,\n  channel: NonPositionScaleChannel,\n  legendCmp: LegendComponent\n) {\n  const legend = model.legend(channel);\n  const config = model.config;\n\n  let out: SymbolEncodeEntry = {};\n\n  if (isTimeFieldDef(fieldDef)) {\n    const isUTCScale = model.getScaleComponent(channel).get('type') === ScaleType.UTC;\n    const expr = timeFormatExpression(\n      'datum.value',\n      fieldDef.timeUnit,\n      legend.format,\n      config.legend.shortTimeLabels,\n      config.timeFormat,\n      isUTCScale\n    );\n    labelsSpec = {\n      ...(expr ? {text: {signal: expr}} : {}),\n      ...labelsSpec\n    };\n  }\n\n  out = {...out, ...labelsSpec};\n\n  return keys(out).length > 0 ? out : undefined;\n}\n\nfunction getMaxValue(\n  channelDef: FieldDefWithCondition<MarkPropFieldDef<string>> | ValueDefWithCondition<MarkPropFieldDef<string>>\n) {\n  return getConditionValue(channelDef, (v: number, conditionalDef) => Math.max(v, conditionalDef.value as any));\n}\n\nfunction getFirstConditionValue(\n  channelDef: FieldDefWithCondition<MarkPropFieldDef<string>> | ValueDefWithCondition<MarkPropFieldDef<string>>\n) {\n  return getConditionValue(channelDef, (v: number, conditionalDef) => {\n    return getFirstDefined(v, conditionalDef.value);\n  });\n}\n\nfunction getConditionValue<T>(\n  channelDef: FieldDefWithCondition<MarkPropFieldDef<string>> | ValueDefWithCondition<MarkPropFieldDef<string>>,\n  reducer: (val: T, conditionalDef: Conditional<ValueDef>) => T\n): T {\n  if (hasConditionalValueDef(channelDef)) {\n    return (isArray(channelDef.condition) ? channelDef.condition : [channelDef.condition]).reduce(\n      reducer,\n      channelDef.value as any\n    );\n  } else if (isValueDef(channelDef)) {\n    return channelDef.value as any;\n  }\n  return undefined;\n}\n"]}