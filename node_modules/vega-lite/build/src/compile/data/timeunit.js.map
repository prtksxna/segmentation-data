{"version":3,"file":"timeunit.js","sourceRoot":"","sources":["../../../../src/compile/data/timeunit.ts"],"names":[],"mappings":";;;AAAA,2CAAuC;AACvC,2CAAmD;AAEnD,mCAA6D;AAG7D,uCAAuD;AAQvD;IAAkC,wCAAa;IAK7C,sBAAY,MAAoB,EAAU,OAAgC;QAA1E,YACE,kBAAM,MAAM,CAAC,SACd;QAFyC,aAAO,GAAP,OAAO,CAAyB;;IAE1E,CAAC;IANM,4BAAK,GAAZ;QACE,OAAO,IAAI,YAAY,CAAC,IAAI,EAAE,gBAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IACzD,CAAC;IAMa,6BAAgB,GAA9B,UAA+B,MAAoB,EAAE,KAAqB;QACxE,IAAM,OAAO,GAAG,KAAK,CAAC,cAAc,CAClC,UAAC,iBAAoC,EAAE,QAAQ;YAC7C,IAAI,QAAQ,CAAC,QAAQ,EAAE;gBACrB,IAAM,CAAC,GAAG,kBAAO,CAAC,QAAQ,EAAE,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC,CAAC;gBAC3C,iBAAiB,CAAC,CAAC,CAAC,GAAG;oBACrB,EAAE,EAAE,CAAC;oBACL,QAAQ,EAAE,QAAQ,CAAC,QAAQ;oBAC3B,KAAK,EAAE,QAAQ,CAAC,KAAK;iBACtB,CAAC;aACH;YACD,OAAO,iBAAiB,CAAC;QAC3B,CAAC,EACD,EAA6B,CAC9B,CAAC;QAEF,IAAI,WAAI,CAAC,OAAO,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;YAC9B,OAAO,IAAI,CAAC;SACb;QAED,OAAO,IAAI,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC;IAEa,8BAAiB,GAA/B,UAAgC,MAAoB,EAAE,CAAoB;;QACxE,OAAO,IAAI,YAAY,CAAC,MAAM;YAC5B,GAAC,CAAC,CAAC,KAAK,IAAG;gBACT,EAAE,EAAE,CAAC,CAAC,EAAE;gBACR,QAAQ,EAAE,CAAC,CAAC,QAAQ;gBACpB,KAAK,EAAE,CAAC,CAAC,KAAK;aACf;gBACD,CAAC;IACL,CAAC;IAEM,4BAAK,GAAZ,UAAa,KAAmB;QAC9B,IAAI,CAAC,OAAO,wBAAO,IAAI,CAAC,OAAO,EAAK,KAAK,CAAC,OAAO,CAAC,CAAC;QACnD,KAAK,CAAC,MAAM,EAAE,CAAC;IACjB,CAAC;IAEM,qCAAc,GAArB;QACE,IAAM,GAAG,GAAG,EAAE,CAAC;QAEf,WAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAA,CAAC;YAC1B,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;QACnB,CAAC,CAAC,CAAC;QAEH,OAAO,GAAG,CAAC;IACb,CAAC;IAEM,sCAAe,GAAtB;QACE,IAAM,GAAG,GAAG,EAAE,CAAC;QAEf,WAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAA,CAAC;YAC1B,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;QACtB,CAAC,CAAC,CAAC;QAEH,OAAO,GAAG,CAAC;IACb,CAAC;IAEM,2BAAI,GAAX;QACE,OAAO,cAAY,WAAI,CAAC,IAAI,CAAC,OAAO,CAAG,CAAC;IAC1C,CAAC;IAEM,+BAAQ,GAAf;QACE,OAAO,WAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC;YAC7B,OAAO;gBACL,IAAI,EAAE,SAAS;gBACf,EAAE,EAAE,CAAC,CAAC,EAAE;gBACR,IAAI,EAAE,oBAAS,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,KAAK,CAAC;aACf,CAAC;QAC1B,CAAC,CAAC,CAAC;IACL,CAAC;IACH,mBAAC;AAAD,CAAC,AAhFD,CAAkC,wBAAa,GAgF9C;AAhFY,oCAAY","sourcesContent":["import {vgField} from '../../fielddef';\nimport {fieldExpr, TimeUnit} from '../../timeunit';\nimport {TimeUnitTransform} from '../../transform';\nimport {Dict, duplicate, hash, keys, vals} from '../../util';\nimport {VgFormulaTransform} from '../../vega.schema';\nimport {ModelWithField} from '../model';\nimport {DataFlowNode, TransformNode} from './dataflow';\n\nexport interface TimeUnitComponent {\n  as: string;\n  timeUnit: TimeUnit;\n  field: string;\n}\n\nexport class TimeUnitNode extends TransformNode {\n  public clone() {\n    return new TimeUnitNode(null, duplicate(this.formula));\n  }\n\n  constructor(parent: DataFlowNode, private formula: Dict<TimeUnitComponent>) {\n    super(parent);\n  }\n\n  public static makeFromEncoding(parent: DataFlowNode, model: ModelWithField) {\n    const formula = model.reduceFieldDef(\n      (timeUnitComponent: TimeUnitComponent, fieldDef) => {\n        if (fieldDef.timeUnit) {\n          const f = vgField(fieldDef, {forAs: true});\n          timeUnitComponent[f] = {\n            as: f,\n            timeUnit: fieldDef.timeUnit,\n            field: fieldDef.field\n          };\n        }\n        return timeUnitComponent;\n      },\n      {} as Dict<TimeUnitComponent>\n    );\n\n    if (keys(formula).length === 0) {\n      return null;\n    }\n\n    return new TimeUnitNode(parent, formula);\n  }\n\n  public static makeFromTransform(parent: DataFlowNode, t: TimeUnitTransform) {\n    return new TimeUnitNode(parent, {\n      [t.field]: {\n        as: t.as,\n        timeUnit: t.timeUnit,\n        field: t.field\n      }\n    });\n  }\n\n  public merge(other: TimeUnitNode) {\n    this.formula = {...this.formula, ...other.formula};\n    other.remove();\n  }\n\n  public producedFields() {\n    const out = {};\n\n    vals(this.formula).forEach(f => {\n      out[f.as] = true;\n    });\n\n    return out;\n  }\n\n  public dependentFields() {\n    const out = {};\n\n    vals(this.formula).forEach(f => {\n      out[f.field] = true;\n    });\n\n    return out;\n  }\n\n  public hash() {\n    return `TimeUnit ${hash(this.formula)}`;\n  }\n\n  public assemble() {\n    return vals(this.formula).map(c => {\n      return {\n        type: 'formula',\n        as: c.as,\n        expr: fieldExpr(c.timeUnit, c.field)\n      } as VgFormulaTransform;\n    });\n  }\n}\n"]}