{"version":3,"file":"optimize.js","sourceRoot":"","sources":["../../../../src/compile/data/optimize.ts"],"names":[],"mappings":"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","sourcesContent":["import {MAIN} from '../../data';\nimport {flatten, keys, vals} from '../../util';\nimport {AggregateNode} from './aggregate';\nimport {DataFlowNode, OutputNode} from './dataflow';\nimport {FacetNode} from './facet';\nimport {ParseNode} from './formatparse';\nimport {DataComponent} from './index';\nimport * as optimizers from './optimizers';\nimport {SourceNode} from './source';\nimport {StackNode} from './stack';\n\nexport const FACET_SCALE_PREFIX = 'scale_';\n\n/**\n * Clones the subtree and ignores output nodes except for the leafs, which are renamed.\n */\nfunction cloneSubtree(facet: FacetNode) {\n  function clone(node: DataFlowNode): DataFlowNode[] {\n    if (!(node instanceof FacetNode)) {\n      const copy = node.clone();\n\n      if (copy instanceof OutputNode) {\n        const newName = FACET_SCALE_PREFIX + copy.getSource();\n        copy.setSource(newName);\n\n        facet.model.component.data.outputNodes[newName] = copy;\n      } else if (copy instanceof AggregateNode || copy instanceof StackNode) {\n        copy.addDimensions(facet.fields);\n      }\n      flatten(node.children.map(clone)).forEach((n: DataFlowNode) => (n.parent = copy));\n\n      return [copy];\n    }\n\n    return flatten(node.children.map(clone));\n  }\n  return clone;\n}\n\n/**\n * Move facet nodes down to the next fork or output node. Also pull the main output with the facet node.\n * After moving down the facet node, make a copy of the subtree and make it a child of the main output.\n */\nfunction moveFacetDown(node: DataFlowNode) {\n  if (node instanceof FacetNode) {\n    if (node.numChildren() === 1 && !(node.children[0] instanceof OutputNode)) {\n      // move down until we hit a fork or output node\n\n      const child = node.children[0];\n\n      if (child instanceof AggregateNode || child instanceof StackNode) {\n        child.addDimensions(node.fields);\n      }\n\n      child.swapWithParent();\n      moveFacetDown(node);\n    } else {\n      // move main to facet\n      moveMainDownToFacet(node.model.component.data.main);\n\n      // replicate the subtree and place it before the facet's main node\n      const copy: DataFlowNode[] = flatten(node.children.map(cloneSubtree(node)));\n      copy.forEach(c => (c.parent = node.model.component.data.main));\n    }\n  } else {\n    node.children.forEach(moveFacetDown);\n  }\n}\n\nfunction moveMainDownToFacet(node: DataFlowNode) {\n  if (node instanceof OutputNode && node.type === MAIN) {\n    if (node.numChildren() === 1) {\n      const child = node.children[0];\n\n      if (!(child instanceof FacetNode)) {\n        child.swapWithParent();\n        moveMainDownToFacet(node);\n      }\n    }\n  }\n}\n\n/**\n * Remove nodes that are not required starting from a root.\n */\nfunction removeUnnecessaryNodes(node: DataFlowNode) {\n  // remove output nodes that are not required\n  if (node instanceof OutputNode && !node.isRequired()) {\n    node.remove();\n  }\n\n  node.children.forEach(removeUnnecessaryNodes);\n}\n\n/**\n * Return all leaf nodes.\n */\nfunction getLeaves(roots: DataFlowNode[]) {\n  const leaves: DataFlowNode[] = [];\n  function append(node: DataFlowNode) {\n    if (node.numChildren() === 0) {\n      leaves.push(node);\n    } else {\n      node.children.forEach(append);\n    }\n  }\n\n  roots.forEach(append);\n  return leaves;\n}\n\n/**\n * Inserts an Intermediate ParseNode containing all non-conflicting Parse fields and removes the empty ParseNodes\n */\nexport function mergeParse(node: DataFlowNode) {\n  const parseChildren = node.children.filter((x): x is ParseNode => x instanceof ParseNode);\n  if (parseChildren.length > 1) {\n    const commonParse = {};\n    for (const parseNode of parseChildren) {\n      const parse = parseNode.parse;\n      for (const k of keys(parse)) {\n        if (commonParse[k] === undefined) {\n          commonParse[k] = parse[k];\n        } else if (commonParse[k] !== parse[k]) {\n          delete commonParse[k];\n        }\n      }\n    }\n    if (keys(commonParse).length !== 0) {\n      const mergedParseNode = new ParseNode(node, commonParse);\n      for (const parseNode of parseChildren) {\n        for (const key of keys(commonParse)) {\n          delete parseNode.parse[key];\n        }\n        node.removeChild(parseNode);\n        parseNode.parent = mergedParseNode;\n        if (keys(parseNode.parse).length === 0) {\n          parseNode.remove();\n        }\n      }\n    }\n  }\n  node.children.forEach(mergeParse);\n}\n\n/**\n * Optimizes the dataflow of the passed in data component.\n */\nexport function optimizeDataflow(dataComponent: DataComponent) {\n  let roots: SourceNode[] = vals(dataComponent.sources);\n\n  roots.forEach(removeUnnecessaryNodes);\n\n  // remove source nodes that don't have any children because they also don't have output nodes\n  roots = roots.filter(r => r.numChildren() > 0);\n  getLeaves(roots).forEach(optimizers.iterateFromLeaves(optimizers.removeUnusedSubtrees));\n  roots = roots.filter(r => r.numChildren() > 0);\n\n  getLeaves(roots).forEach(optimizers.iterateFromLeaves(optimizers.moveParseUp));\n  getLeaves(roots).forEach(optimizers.removeDuplicateTimeUnits);\n\n  roots.forEach(moveFacetDown);\n  roots.forEach(mergeParse);\n  roots.forEach(optimizers.mergeIdenticalTransforms);\n\n  keys(dataComponent.sources).forEach(s => {\n    if (dataComponent.sources[s].numChildren() === 0) {\n      delete dataComponent.sources[s];\n    }\n  });\n}\n"]}