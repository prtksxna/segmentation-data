{"version":3,"file":"lookup.js","sourceRoot":"","sources":["../../../../src/compile/data/lookup.ts"],"names":[],"mappings":"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","sourcesContent":["import {isString, toSet} from 'vega-util';\nimport * as log from '../../log';\nimport {LookupTransform} from '../../transform';\nimport {hash, StringSet} from '../../util';\nimport {VgLookupTransform} from '../../vega.schema';\nimport {Model} from '../model';\nimport {DataFlowNode, OutputNode, TransformNode} from './dataflow';\nimport {SourceNode} from './source';\n\nexport class LookupNode extends TransformNode {\n  constructor(parent: DataFlowNode, public readonly transform: LookupTransform, public readonly secondary: string) {\n    super(parent);\n  }\n\n  public static make(parent: DataFlowNode, model: Model, transform: LookupTransform, counter: number) {\n    const sources = model.component.data.sources;\n    const s = new SourceNode(transform.from.data);\n    let fromSource = sources[s.hash()];\n    if (!fromSource) {\n      sources[s.hash()] = s;\n      fromSource = s;\n    }\n\n    const fromOutputName = model.getName(`lookup_${counter}`);\n    const fromOutputNode = new OutputNode(\n      fromSource,\n      fromOutputName,\n      'lookup',\n      model.component.data.outputNodeRefCounts\n    );\n\n    model.component.data.outputNodes[fromOutputName] = fromOutputNode;\n\n    return new LookupNode(parent, transform, fromOutputNode.getSource());\n  }\n\n  public producedFields(): StringSet {\n    return toSet(\n      this.transform.from.fields || (this.transform.as instanceof Array ? this.transform.as : [this.transform.as])\n    );\n  }\n\n  public hash() {\n    return `Lookup ${hash({transform: this.transform, secondary: this.secondary})}`;\n  }\n\n  public assemble(): VgLookupTransform {\n    let foreign: Partial<VgLookupTransform>;\n\n    if (this.transform.from.fields) {\n      // lookup a few fields and add create a flat output\n      foreign = {\n        values: this.transform.from.fields,\n        ...(this.transform.as ? {as: this.transform.as instanceof Array ? this.transform.as : [this.transform.as]} : {})\n      };\n    } else {\n      // lookup full record and nest it\n      let asName = this.transform.as;\n      if (!isString(asName)) {\n        log.warn(log.message.NO_FIELDS_NEEDS_AS);\n        asName = '_lookup';\n      }\n\n      foreign = {\n        as: [asName]\n      };\n    }\n\n    return {\n      type: 'lookup',\n      from: this.secondary,\n      key: this.transform.from.key,\n      fields: [this.transform.lookup],\n      ...foreign,\n      ...(this.transform.default ? {default: this.transform.default} : {})\n    };\n  }\n}\n"]}