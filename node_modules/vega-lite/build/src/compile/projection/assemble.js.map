{"version":3,"file":"assemble.js","sourceRoot":"","sources":["../../../../src/compile/projection/assemble.ts"],"names":[],"mappings":";;;AACA,mCAAoC;AACpC,iDAA4D;AAC5D,kCAA2E;AAE3E,SAAgB,mBAAmB,CAAC,KAAY;IAC9C,IAAI,oBAAY,CAAC,KAAK,CAAC,IAAI,qBAAa,CAAC,KAAK,CAAC,IAAI,qBAAa,CAAC,KAAK,CAAC,EAAE;QACvE,OAAO,sCAAsC,CAAC,KAAK,CAAC,CAAC;KACtD;SAAM;QACL,OAAO,0BAA0B,CAAC,KAAK,CAAC,CAAC;KAC1C;AACH,CAAC;AAND,kDAMC;AAED,SAAgB,sCAAsC,CAAC,KAAY;IACjE,OAAO,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAC,WAAW,EAAE,KAAK;QAC9C,OAAO,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,CAAC,CAAC;IACzD,CAAC,EAAE,0BAA0B,CAAC,KAAK,CAAC,CAAC,CAAC;AACxC,CAAC;AAJD,wFAIC;AAED,SAAgB,0BAA0B,CAAC,KAAY;IACrD,IAAM,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC;IAC7C,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,MAAM,EAAE;QAClC,OAAO,EAAE,CAAC;KACX;IAED,IAAM,UAAU,GAAG,SAAS,CAAC,OAAO,EAAE,CAAC;IAChC,IAAA,sBAAI,EAAE,2CAAO,CAAe,CAAC,iGAAiG;IAErI,IAAM,IAAI,GAAc;QACtB,MAAM,EAAE,MAAI,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,MAAM,EAAV,CAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAG;KAChE,CAAC;IAEF,IAAM,GAAG,GAAa,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAC,OAAO,EAAE,IAAI;QACxD,IAAM,MAAM,GAAW,yBAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,WAAS,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAI,CAAC;QACnG,IAAI,CAAC,eAAQ,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE;YAC9B,iCAAiC;YACjC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACtB;QACD,OAAO,OAAO,CAAC;IACjB,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAI,GAAG,CAAC,MAAM,IAAI,CAAC,EAAE;QACnB,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;KAClE;IAED,OAAO;2BAEH,IAAI,MAAA;YACJ,IAAI,MAAA,EACJ,GAAG,EAAE;gBACH,MAAM,EAAE,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,MAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;aACxD,IACE,IAAI;KAEV,CAAC;AACJ,CAAC;AApCD,gEAoCC","sourcesContent":["import {SignalRef} from 'vega';\nimport {contains} from '../../util';\nimport {isSignalRef, VgProjection} from '../../vega.schema';\nimport {isConcatModel, isLayerModel, isRepeatModel, Model} from '../model';\n\nexport function assembleProjections(model: Model): VgProjection[] {\n  if (isLayerModel(model) || isConcatModel(model) || isRepeatModel(model)) {\n    return assembleProjectionsForModelAndChildren(model);\n  } else {\n    return assembleProjectionForModel(model);\n  }\n}\n\nexport function assembleProjectionsForModelAndChildren(model: Model): VgProjection[] {\n  return model.children.reduce((projections, child) => {\n    return projections.concat(child.assembleProjections());\n  }, assembleProjectionForModel(model));\n}\n\nexport function assembleProjectionForModel(model: Model): VgProjection[] {\n  const component = model.component.projection;\n  if (!component || component.merged) {\n    return [];\n  }\n\n  const projection = component.combine();\n  const {name, ...rest} = projection; // we need to extract name so that it is always present in the output and pass TS type validation\n\n  const size: SignalRef = {\n    signal: `[${component.size.map(ref => ref.signal).join(', ')}]`\n  };\n\n  const fit: string[] = component.data.reduce((sources, data) => {\n    const source: string = isSignalRef(data) ? data.signal : `data('${model.lookupDataSource(data)}')`;\n    if (!contains(sources, source)) {\n      // build a unique list of sources\n      sources.push(source);\n    }\n    return sources;\n  }, []);\n\n  if (fit.length <= 0) {\n    throw new Error(\"Projection's fit didn't find any data sources\");\n  }\n\n  return [\n    {\n      name,\n      size,\n      fit: {\n        signal: fit.length > 1 ? `[${fit.join(', ')}]` : fit[0]\n      },\n      ...rest\n    }\n  ];\n}\n"]}