{"version":3,"file":"buildmodel.js","sourceRoot":"","sources":["../../../src/compile/buildmodel.ts"],"names":[],"mappings":";;;AACA,kDAA8B;AAC9B,gCAQiB;AACjB,mCAAqC;AACrC,iCAAmC;AACnC,iCAAmC;AAEnC,mCAAqC;AAErC,+BAAiC;AAEjC,SAAgB,UAAU,CACxB,IAAoB,EACpB,MAAa,EACb,eAAuB,EACvB,QAA0B,EAC1B,QAAuB,EACvB,MAAc,EACd,GAAY;IAEZ,IAAI,kBAAW,CAAC,IAAI,CAAC,EAAE;QACrB,OAAO,IAAI,kBAAU,CAAC,IAAI,EAAE,MAAM,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;KACxE;IAED,IAAI,kBAAW,CAAC,IAAI,CAAC,EAAE;QACrB,OAAO,IAAI,kBAAU,CAAC,IAAI,EAAE,MAAM,EAAE,eAAe,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;KACvF;IAED,IAAI,iBAAU,CAAC,IAAI,CAAC,EAAE;QACpB,OAAO,IAAI,gBAAS,CAAC,IAAI,EAAE,MAAM,EAAE,eAAe,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;KACtF;IAED,IAAI,mBAAY,CAAC,IAAI,CAAC,EAAE;QACtB,OAAO,IAAI,oBAAW,CAAC,IAAI,EAAE,MAAM,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;KACzE;IAED,IAAI,mBAAY,CAAC,IAAI,CAAC,EAAE;QACtB,OAAO,IAAI,oBAAW,CAAC,IAAI,EAAE,MAAM,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;KACzE;IAED,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;AAC5C,CAAC;AA9BD,gCA8BC","sourcesContent":["import {Config} from '../config';\nimport * as log from '../log';\nimport {\n  isConcatSpec,\n  isFacetSpec,\n  isLayerSpec,\n  isRepeatSpec,\n  isUnitSpec,\n  LayoutSizeMixins,\n  NormalizedSpec\n} from '../spec';\nimport {ConcatModel} from './concat';\nimport {FacetModel} from './facet';\nimport {LayerModel} from './layer';\nimport {Model} from './model';\nimport {RepeatModel} from './repeat';\nimport {RepeaterValue} from './repeater';\nimport {UnitModel} from './unit';\n\nexport function buildModel(\n  spec: NormalizedSpec,\n  parent: Model,\n  parentGivenName: string,\n  unitSize: LayoutSizeMixins,\n  repeater: RepeaterValue,\n  config: Config,\n  fit: boolean\n): Model {\n  if (isFacetSpec(spec)) {\n    return new FacetModel(spec, parent, parentGivenName, repeater, config);\n  }\n\n  if (isLayerSpec(spec)) {\n    return new LayerModel(spec, parent, parentGivenName, unitSize, repeater, config, fit);\n  }\n\n  if (isUnitSpec(spec)) {\n    return new UnitModel(spec, parent, parentGivenName, unitSize, repeater, config, fit);\n  }\n\n  if (isRepeatSpec(spec)) {\n    return new RepeatModel(spec, parent, parentGivenName, repeater, config);\n  }\n\n  if (isConcatSpec(spec)) {\n    return new ConcatModel(spec, parent, parentGivenName, repeater, config);\n  }\n\n  throw new Error(log.message.INVALID_SPEC);\n}\n"]}