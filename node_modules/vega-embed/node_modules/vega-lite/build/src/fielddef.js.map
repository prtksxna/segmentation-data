{"version":3,"file":"fielddef.js","sourceRoot":"","sources":["../../src/fielddef.ts"],"names":[],"mappings":"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","sourcesContent":["// Declaration and utility for variants of a field definition object\nimport {AggregateOp} from 'vega';\nimport {isArray, isBoolean, isNumber, isString} from 'vega-util';\nimport {isAggregateOp, isCountingAggregateOp} from './aggregate';\nimport {Axis} from './axis';\nimport {autoMaxBins, BinParams, binToString} from './bin';\nimport {Channel, rangeType} from './channel';\nimport {CompositeAggregate} from './compositemark';\nimport {Config} from './config';\nimport {DateTime, dateTimeExpr, isDateTime} from './datetime';\nimport {TitleMixins} from './guide';\nimport {Legend} from './legend';\nimport * as log from './log';\nimport {LogicalOperand} from './logical';\nimport {Predicate} from './predicate';\nimport {Scale} from './scale';\nimport {Sort, SortOrder} from './sort';\nimport {StackOffset} from './stack';\nimport {getLocalTimeUnit, getTimeUnitParts, isLocalSingleTimeUnit, isUtcSingleTimeUnit, normalizeTimeUnit, TimeUnit} from './timeunit';\nimport {AggregatedFieldDef, WindowFieldDef} from './transform';\nimport {getFullName, QUANTITATIVE, Type} from './type';\nimport {flatAccessWithDatum, replacePathInField, titlecase} from './util';\n\n\n/**\n * Definition object for a constant value of an encoding channel.\n */\nexport interface ValueDef {\n  /**\n   * A constant value in visual domain (e.g., `\"red\"` / \"#0099ff\" for color, values between `0` to `1` for opacity).\n   */\n  value: number | string | boolean;\n}\n\n/**\n * Generic type for conditional channelDef.\n * F defines the underlying FieldDef type.\n */\nexport type ChannelDefWithCondition<F extends FieldDef<any>> = FieldDefWithCondition<F> | ValueDefWithCondition<F>;\n\nexport type Conditional<T> = ConditionalPredicate<T> | ConditionalSelection<T>;\n\nexport type ConditionalPredicate<T> = {\n  test: LogicalOperand<Predicate>;\n} & T;\n\nexport type ConditionalSelection<T> = {\n  /**\n   * A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose).\n   */\n  selection: LogicalOperand<string>;\n} & T;\n\nexport function isConditionalSelection<T>(c: Conditional<T>): c is ConditionalSelection<T> {\n  return c['selection'];\n}\n\nexport interface ConditionValueDefMixins {\n  /**\n   * One or more value definition(s) with a selection predicate.\n   *\n   * __Note:__ A field definition's `condition` property can only contain [value definitions](https://vega.github.io/vega-lite/docs/encoding.html#value-def)\n   * since Vega-Lite only allows at most one encoded field per encoding channel.\n   */\n  condition?: Conditional<ValueDef> | Conditional<ValueDef>[];\n}\n\n/**\n * A FieldDef with Condition<ValueDef>\n * {\n *   condition: {value: ...},\n *   field: ...,\n *   ...\n * }\n */\n\nexport type FieldDefWithCondition<F extends FieldDef<any>> = F & ConditionValueDefMixins;\n\n/**\n * A ValueDef with Condition<ValueDef | FieldDef>\n * {\n *   condition: {field: ...} | {value: ...},\n *   value: ...,\n * }\n */\nexport interface ValueDefWithCondition<F extends FieldDef<any>> {\n  /**\n   * A field definition or one or more value definition(s) with a selection predicate.\n   */\n  condition?: Conditional<F> | Conditional<ValueDef> | Conditional<ValueDef>[];\n\n  /**\n   * A constant value in visual domain.\n   */\n  value?: number | string | boolean;\n}\n\n/**\n * Reference to a repeated value.\n */\nexport type RepeatRef = {\n  repeat: 'row' | 'column'\n};\n\nexport type Field = string | RepeatRef;\n\nexport function isRepeatRef(field: Field): field is RepeatRef {\n  return field && !isString(field) && 'repeat' in field;\n}\n\n/** @hide */\nexport type HiddenCompositeAggregate = CompositeAggregate;\n\nexport type Aggregate = AggregateOp | HiddenCompositeAggregate;\n\nexport interface FieldDefBase<F> {\n\n  /**\n   * __Required.__ A string defining the name of the field from which to pull a data value\n   * or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\n   *\n   * __Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`).\n   * If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`).\n   * See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).\n   *\n   * __Note:__ `field` is not required if `aggregate` is `count`.\n   */\n  field?: F;\n\n  // function\n\n  /**\n   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.\n   * or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\n   *\n   * __Default value:__ `undefined` (None)\n   */\n  timeUnit?: TimeUnit;\n\n  /**\n   * A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params).\n   * If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\n   *\n   * __Default value:__ `false`\n   */\n  bin?: boolean | BinParams;\n\n  /**\n   * Aggregation function for the field\n   * (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).\n   *\n   * __Default value:__ `undefined` (None)\n   */\n  aggregate?: Aggregate;\n}\n\nexport function toFieldDefBase(fieldDef: FieldDef<string>): FieldDefBase<string> {\n  const {field, timeUnit, bin, aggregate} = fieldDef;\n  return {\n    ...(timeUnit ? {timeUnit} : {}),\n    ...(bin ? {bin} : {}),\n    ...(aggregate ? {aggregate} : {}),\n    field\n  };\n}\n\n/**\n *  Definition object for a data field, its type and transformation of an encoding channel.\n */\nexport interface FieldDef<F> extends FieldDefBase<F>, TitleMixins {\n  /**\n   * The encoded field's type of measurement (`\"quantitative\"`, `\"temporal\"`, `\"ordinal\"`, or `\"nominal\"`).\n   * It can also be a `\"geojson\"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).\n   */\n  // * or an initial character of the type name (`\"Q\"`, `\"T\"`, `\"O\"`, `\"N\"`).\n  // * This property is case-insensitive.\n  type: Type;\n}\n\nexport interface SortableFieldDef<F> extends FieldDef<F> {\n  /**\n   * Sort order for the encoded field.\n   *\n   * For continuous fields (quantitative or temporal), `sort` can be either `\"ascending\"` or `\"descending\"`.\n   *\n   * For discrete fields, `sort` can be one of the following:\n   * - `\"ascending\"` or `\"descending\"` -- for sorting by the values' natural order in Javascript.\n   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\n   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order.  For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\"month\"` and `\"day\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\"Mon\"`, `\"Tue\"`).\n   * - `null` indicating no sort.\n   *\n   * __Default value:__ `\"ascending\"`\n   *\n   * __Note:__ `null` is not supported for `row` and `column`.\n   */\n  sort?: Sort<F>;\n}\n\nexport interface ScaleFieldDef<F> extends SortableFieldDef<F> {\n  /**\n   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\n   *\n   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\n   *\n   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\n   */\n  scale?: Scale | null;\n}\n\nexport interface PositionFieldDef<F> extends ScaleFieldDef<F> {\n  /**\n   * An object defining properties of axis's gridlines, ticks and labels.\n   * If `null`, the axis for the encoding channel will be removed.\n   *\n   * __Default value:__ If undefined, default [axis properties](https://vega.github.io/vega-lite/docs/axis.html) are applied.\n   */\n  axis?: Axis | null;\n\n  /**\n   * Type of stacking offset if the field should be stacked.\n   * `stack` is only applicable for `x` and `y` channels with continuous domains.\n   * For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.\n   *\n   * `stack` can be one of the following values:\n   * - `\"zero\"`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).\n   * - `\"normalize\"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>\n   * -`\"center\"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).\n   * - `null` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.\n   *\n   * __Default value:__ `zero` for plots with all of the following conditions are true:\n   * (1) the mark is `bar` or `area`;\n   * (2) the stacked measure channel (x or y) has a linear scale;\n   * (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y.  Otherwise, `null` by default.\n   */\n  stack?: StackOffset | null;\n}\n\n/**\n * Field definition of a mark property, which can contain a legend.\n */\nexport interface MarkPropFieldDef<F> extends ScaleFieldDef<F> {\n   /**\n    * An object defining properties of the legend.\n    * If `null`, the legend for the encoding channel will be removed.\n    *\n    * __Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.\n    */\n  legend?: Legend | null;\n}\n\n// Detail\n\n// Order Path have no scale\n\nexport interface OrderFieldDef<F> extends FieldDef<F> {\n  /**\n   * The sort order. One of `\"ascending\"` (default) or `\"descending\"`.\n   */\n  sort?: SortOrder;\n}\n\nexport interface TextFieldDef<F> extends FieldDef<F> {\n  /**\n   * The [formatting pattern](https://vega.github.io/vega-lite/docs/format.html) for a text field. If not defined, this will be determined automatically.\n   */\n  format?: string;\n}\n\nexport type ChannelDef<F> = ChannelDefWithCondition<FieldDef<F>>;\n\nexport function isConditionalDef<F>(channelDef: ChannelDef<F>): channelDef is ChannelDefWithCondition<FieldDef<F>> {\n  return !!channelDef && !!channelDef.condition;\n}\n\n/**\n * Return if a channelDef is a ConditionalValueDef with ConditionFieldDef\n */\nexport function hasConditionalFieldDef<F>(channelDef: ChannelDef<F>): channelDef is (ValueDef & {condition: Conditional<FieldDef<F>>}) {\n  return !!channelDef && !!channelDef.condition && !isArray(channelDef.condition) && isFieldDef(channelDef.condition);\n}\n\nexport function hasConditionalValueDef<F>(channelDef: ChannelDef<F>): channelDef is (ValueDef & {condition: Conditional<ValueDef> | Conditional<ValueDef>[]}) {\n  return !!channelDef && !!channelDef.condition && (\n    isArray(channelDef.condition) || isValueDef(channelDef.condition)\n  );\n}\n\nexport function isFieldDef<F>(channelDef: ChannelDef<F>): channelDef is FieldDef<F> | PositionFieldDef<F> | ScaleFieldDef<F> | MarkPropFieldDef<F> | OrderFieldDef<F> | TextFieldDef<F> {\n  return !!channelDef && (!!channelDef['field'] || channelDef['aggregate'] === 'count');\n}\n\nexport function isStringFieldDef(fieldDef: ChannelDef<string|RepeatRef>): fieldDef is FieldDef<string> {\n  return isFieldDef(fieldDef) && isString(fieldDef.field);\n}\n\nexport function isValueDef<F>(channelDef: ChannelDef<F>): channelDef is ValueDef {\n  return channelDef && 'value' in channelDef && channelDef['value'] !== undefined;\n}\n\nexport function isScaleFieldDef<F>(channelDef: ChannelDef<F>): channelDef is ScaleFieldDef<F> {\n  return !!channelDef && (!!channelDef['scale'] || !!channelDef['sort']);\n}\n\nexport interface FieldRefOption {\n  /** exclude bin, aggregate, timeUnit */\n  nofn?: boolean;\n  /** Wrap the field with datum or parent (e.g., datum['...'] for Vega Expression */\n  expr?: 'datum' | 'parent';\n  /** prepend fn with custom function prefix */\n  prefix?: string;\n  /** append suffix to the field ref for bin (default='start') */\n  binSuffix?: 'end' | 'range' | 'mid';\n  /** append suffix to the field ref (general) */\n  suffix?: string;\n}\n\nfunction isOpFieldDef(fieldDef: FieldDefBase<string> | WindowFieldDef | AggregatedFieldDef): fieldDef is WindowFieldDef | AggregatedFieldDef {\n  return !!fieldDef['op'];\n}\n\nexport function vgField(fieldDef: FieldDefBase<string> | WindowFieldDef | AggregatedFieldDef, opt: FieldRefOption = {}): string {\n  let field = fieldDef.field;\n  const prefix = opt.prefix;\n  let suffix = opt.suffix;\n\n  if (isCount(fieldDef)) {\n    field = 'count_*';\n  } else {\n    let fn: string = undefined;\n\n    if (!opt.nofn) {\n      if (isOpFieldDef(fieldDef)) {\n        fn = fieldDef.op;\n      } else if (fieldDef.bin) {\n        fn = binToString(fieldDef.bin);\n        suffix = opt.binSuffix || '';\n      } else if (fieldDef.aggregate) {\n        fn = String(fieldDef.aggregate);\n      } else if (fieldDef.timeUnit) {\n        fn = String(fieldDef.timeUnit);\n      }\n    }\n\n    if (fn) {\n      field = field ? `${fn}_${field}` : fn;\n    }\n  }\n\n  if (suffix) {\n    field = `${field}_${suffix}`;\n  }\n\n  if (prefix) {\n    field = `${prefix}_${field}`;\n  }\n\n  if (opt.expr) {\n    // Expression to access flattened field. No need to escape dots.\n    return flatAccessWithDatum(field, opt.expr);\n  } else {\n    // We flattened all fields so paths should have become dot.\n    return replacePathInField(field);\n  }\n}\n\nexport function isDiscrete(fieldDef: FieldDef<Field>) {\n  switch (fieldDef.type) {\n    case 'nominal':\n    case 'ordinal':\n    case 'geojson':\n      return true;\n    case 'quantitative':\n      return !!fieldDef.bin;\n    case 'latitude':\n    case 'longitude':\n    case 'temporal':\n      return false;\n  }\n  throw new Error(log.message.invalidFieldType(fieldDef.type));\n}\n\nexport function isContinuous(fieldDef: FieldDef<Field>) {\n  return !isDiscrete(fieldDef);\n}\n\nexport function isCount(fieldDef: FieldDefBase<Field>) {\n  return fieldDef.aggregate === 'count';\n}\n\nexport type FieldTitleFormatter = (fieldDef: FieldDefBase<string>, config: Config) => string;\n\nexport function verbalTitleFormatter(fieldDef: FieldDefBase<string>, config: Config) {\n  const {field: field, bin, timeUnit, aggregate} = fieldDef;\n  if (aggregate === 'count') {\n    return config.countTitle;\n  } else if (bin) {\n    return `${field} (binned)`;\n  } else if (timeUnit) {\n    const units = getTimeUnitParts(timeUnit).join('-');\n    return `${field} (${units})`;\n  } else if (aggregate) {\n    return `${titlecase(aggregate)} of ${field}`;\n  }\n  return field;\n}\n\nexport function functionalTitleFormatter(fieldDef: FieldDefBase<string>, config: Config) {\n  const fn = fieldDef.aggregate || fieldDef.timeUnit || (fieldDef.bin && 'bin');\n  if (fn) {\n    return fn.toUpperCase() + '(' + fieldDef.field + ')';\n  } else {\n    return fieldDef.field;\n  }\n}\n\nexport const defaultTitleFormatter: FieldTitleFormatter = (fieldDef: FieldDefBase<string>, config: Config) => {\n  switch (config.fieldTitle) {\n    case 'plain':\n      return fieldDef.field;\n    case 'functional':\n      return functionalTitleFormatter(fieldDef, config);\n    default:\n      return verbalTitleFormatter(fieldDef, config);\n  }\n};\n\nlet titleFormatter = defaultTitleFormatter;\n\nexport function setTitleFormatter(formatter: FieldTitleFormatter) {\n  titleFormatter = formatter;\n}\n\nexport function resetTitleFormatter() {\n  setTitleFormatter(defaultTitleFormatter);\n}\n\nexport function title(fieldDef: FieldDefBase<string>, config: Config) {\n  return titleFormatter(fieldDef, config);\n}\n\nexport function defaultType(fieldDef: FieldDef<Field>, channel: Channel): Type {\n  if (fieldDef.timeUnit) {\n    return 'temporal';\n  }\n  if (fieldDef.bin) {\n    return 'quantitative';\n  }\n  switch (rangeType(channel)) {\n    case 'continuous':\n      return 'quantitative';\n    case 'discrete':\n      return 'nominal';\n    case 'flexible': // color\n      return 'nominal';\n    default:\n      return 'quantitative';\n  }\n}\n\n/**\n * Returns the fieldDef -- either from the outer channelDef or from the condition of channelDef.\n * @param channelDef\n */\nexport function getFieldDef<F>(channelDef: ChannelDef<F>): FieldDef<F> {\n  if (isFieldDef(channelDef)) {\n    return channelDef;\n  } else if (hasConditionalFieldDef(channelDef)) {\n    return channelDef.condition;\n  }\n  return undefined;\n}\n\n/**\n * Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.\n */\nexport function normalize(channelDef: ChannelDef<string>, channel: Channel): ChannelDef<any> {\n  if (isString(channelDef) || isNumber(channelDef) || isBoolean(channelDef)) {\n    const primitiveType = isString(channelDef) ? 'string' :\n      isNumber(channelDef) ? 'number' : 'boolean';\n    log.warn(log.message.primitiveChannelDef(channel, primitiveType, channelDef));\n    return {value: channelDef};\n  }\n\n  // If a fieldDef contains a field, we need type.\n  if (isFieldDef(channelDef)) {\n    return normalizeFieldDef(channelDef, channel);\n  } else if (hasConditionalFieldDef(channelDef)) {\n    return {\n      ...channelDef,\n      // Need to cast as normalizeFieldDef normally return FieldDef, but here we know that it is definitely Condition<FieldDef>\n      condition: normalizeFieldDef(channelDef.condition, channel) as Conditional<FieldDef<string>>\n    };\n  }\n  return channelDef;\n}\nexport function normalizeFieldDef(fieldDef: FieldDef<string>, channel: Channel) {\n  // Drop invalid aggregate\n  if (fieldDef.aggregate && !isAggregateOp(fieldDef.aggregate)) {\n    const {aggregate, ...fieldDefWithoutAggregate} = fieldDef;\n    log.warn(log.message.invalidAggregate(fieldDef.aggregate));\n    fieldDef = fieldDefWithoutAggregate;\n  }\n\n  // Normalize Time Unit\n  if (fieldDef.timeUnit) {\n    fieldDef = {\n      ...fieldDef,\n      timeUnit: normalizeTimeUnit(fieldDef.timeUnit)\n    };\n  }\n\n  // Normalize bin\n  if (fieldDef.bin) {\n    fieldDef = {\n      ...fieldDef,\n      bin: normalizeBin(fieldDef.bin, channel)\n    };\n  }\n\n  // Normalize Type\n  if (fieldDef.type) {\n    const fullType = getFullName(fieldDef.type);\n    if (fieldDef.type !== fullType) {\n      // convert short type to full type\n      fieldDef = {\n        ...fieldDef,\n        type: fullType\n      };\n    }\n    if (fieldDef.type !== 'quantitative') {\n      if (isCountingAggregateOp(fieldDef.aggregate)) {\n        log.warn(log.message.invalidFieldTypeForCountAggregate(fieldDef.type, fieldDef.aggregate));\n        fieldDef = {\n          ...fieldDef,\n          type: 'quantitative'\n        };\n      }\n    }\n  } else {\n    // If type is empty / invalid, then augment with default type\n    const newType = defaultType(fieldDef, channel);\n    log.warn(log.message.emptyOrInvalidFieldType(fieldDef.type, channel, newType));\n    fieldDef = {\n        ...fieldDef,\n      type: newType\n    };\n  }\n\n  const {compatible, warning} = channelCompatibility(fieldDef, channel);\n  if (!compatible) {\n    log.warn(warning);\n  }\n  return fieldDef;\n}\n\nexport function normalizeBin(bin: BinParams|boolean, channel: Channel) {\n  if (isBoolean(bin)) {\n    return {maxbins: autoMaxBins(channel)};\n  } else if (!bin.maxbins && !bin.step) {\n    return {...bin, maxbins: autoMaxBins(channel)};\n  } else {\n    return bin;\n  }\n}\n\nconst COMPATIBLE = {compatible: true};\nexport function channelCompatibility(fieldDef: FieldDef<Field>, channel: Channel): {compatible: boolean; warning?: string;} {\n  const type = fieldDef.type;\n\n  switch (channel) {\n    case 'row':\n    case 'column':\n      if (isContinuous(fieldDef)) {\n        return {\n          compatible: false,\n          warning: log.message.facetChannelShouldBeDiscrete(channel)\n        };\n      }\n      return COMPATIBLE;\n\n    case 'x':\n    case 'y':\n    case 'color':\n    case 'fill':\n    case 'stroke':\n    case 'text':\n    case 'detail':\n    case 'key':\n    case 'tooltip':\n    case 'href':\n      return COMPATIBLE;\n\n    case 'longitude':\n    case 'longitude2':\n    case 'latitude':\n    case 'latitude2':\n      if (type !== QUANTITATIVE) {\n        return {\n          compatible: false,\n          warning: `Channel ${channel} should be used with a quantitative field only, not ${fieldDef.type} field.`\n        };\n      }\n      return COMPATIBLE;\n\n    case 'opacity':\n    case 'size':\n    case 'x2':\n    case 'y2':\n      if ((type === 'nominal' && !fieldDef['sort']) || type === 'geojson') {\n        return {\n          compatible: false,\n          warning: `Channel ${channel} should not be used with an unsorted discrete field.`\n        };\n      }\n      return COMPATIBLE;\n\n    case 'shape':\n      if (fieldDef.type !== 'nominal' && fieldDef.type !== 'geojson') {\n        return {\n          compatible: false,\n          warning: 'Shape channel should be used with only either nominal or geojson data'\n        };\n      }\n      return COMPATIBLE;\n\n    case 'order':\n      if (fieldDef.type === 'nominal' && !('sort' in fieldDef)) {\n        return {\n          compatible: false,\n          warning: `Channel order is inappropriate for nominal field, which has no inherent order.`\n        };\n      }\n      return COMPATIBLE;\n  }\n  throw new Error('channelCompatability not implemented for channel ' + channel);\n}\n\nexport function isNumberFieldDef(fieldDef: FieldDef<any>) {\n  return fieldDef.type === 'quantitative' || !!fieldDef.bin;\n}\n\nexport function isTimeFieldDef(fieldDef: FieldDef<any>) {\n  return fieldDef.type === 'temporal' || !!fieldDef.timeUnit;\n}\n\n\n/**\n * Getting a value associated with a fielddef.\n * Convert the value to Vega expression if applicable (for datetime object, or string if the field def is temporal or has timeUnit)\n */\nexport function valueExpr(\n  v: number | string | boolean | DateTime,\n  {timeUnit, type, time, undefinedIfExprNotRequired}: {\n    timeUnit: TimeUnit,\n    type?: Type,\n    time?: boolean\n    undefinedIfExprNotRequired?: boolean\n  }\n): string {\n\n  let expr = undefined;\n  if (isDateTime(v)) {\n    expr = dateTimeExpr(v, true);\n  } else if (isString(v) || isNumber(v)) {\n    if (timeUnit || type === 'temporal') {\n      if (isLocalSingleTimeUnit(timeUnit)) {\n        expr = dateTimeExpr({[timeUnit]: v}, true);\n      } else if (isUtcSingleTimeUnit(timeUnit)) {\n        // FIXME is this really correct?\n        expr = valueExpr(v, {timeUnit: getLocalTimeUnit(timeUnit)});\n      } else {\n        // just pass the string to date function (which will call JS Date.parse())\n        expr = `datetime(${JSON.stringify(v)})`;\n      }\n    }\n  }\n  if (expr) {\n    return time ? `time(${expr})` : expr;\n  }\n  // number or boolean or normal string\n  return undefinedIfExprNotRequired ? undefined : JSON.stringify(v);\n}\n\n/**\n * Standardize value array -- convert each value to Vega expression if applicable\n */\nexport function valueArray(\n  fieldDef: FieldDef<string>,\n  values: (number | string | boolean | DateTime)[]\n) {\n  const {timeUnit, type} = fieldDef;\n  return values.map(v => {\n    const expr = valueExpr(v, {timeUnit, type, undefinedIfExprNotRequired: true});\n    // return signal for the expression if we need an expression\n    if (expr !== undefined) {\n      return {signal: expr};\n    }\n    // otherwise just return the original value\n    return v;\n  });\n}\n"]}