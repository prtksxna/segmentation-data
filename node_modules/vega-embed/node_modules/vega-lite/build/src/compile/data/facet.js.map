{"version":3,"file":"facet.js","sourceRoot":"","sources":["../../../../src/compile/data/facet.ts"],"names":[],"mappings":"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","sourcesContent":["import {AggregateOp} from 'vega';\nimport {isArray} from 'vega-util';\nimport {COLUMN, ROW, ScaleChannel} from '../../channel';\nimport {vgField} from '../../fielddef';\nimport * as log from '../../log';\nimport {hasDiscreteDomain} from '../../scale';\nimport {EncodingSortField, isSortField} from '../../sort';\nimport {isVgRangeStep, VgData} from '../../vega.schema';\nimport {FacetModel} from '../facet';\nimport {Model} from '../model';\nimport {assembleDomain, getFieldFromDomain} from '../scale/domain';\nimport {sortArrayIndexField} from './calculate';\nimport {DataFlowNode} from './dataflow';\n\ntype ChildIndependentFieldsWithStep = {\n  x?: string,\n  y?: string\n};\n\ninterface FacetChannelInfo {\n  name: string;\n  fields: string[];\n  sortField?: EncodingSortField<string>;\n\n  sortIndexField?: string;\n}\n\n/**\n * A node that helps us track what fields we are faceting by.\n */\nexport class FacetNode extends DataFlowNode {\n  private readonly column: FacetChannelInfo;\n\n  private readonly row: FacetChannelInfo;\n\n  private readonly childModel: Model;\n\n  /**\n   * @param model The facet model.\n   * @param name The name that this facet source will have.\n   * @param data The source data for this facet data.\n   */\n  public constructor(parent: DataFlowNode, public readonly model: FacetModel, public readonly name: string, public data: string) {\n    super(parent);\n\n    for (const channel of [COLUMN, ROW]) {\n      const fieldDef = model.facet[channel];\n      if (fieldDef) {\n        const {bin, sort} = fieldDef;\n        this[channel] = {\n          name: model.getName(`${channel}_domain`),\n          fields: [\n            vgField(fieldDef),\n            ...(bin ? [vgField(fieldDef, {binSuffix: 'end'})] : [])\n          ],\n          ...(\n            isSortField(sort) ? {sortField: sort} :\n            isArray(sort) ? {sortIndexField: sortArrayIndexField(fieldDef, channel)} :\n            {}\n          )\n        };\n      }\n    }\n    this.childModel = model.child;\n  }\n\n  get fields() {\n    return [\n      ...(this.column && this.column.fields) || [],\n      ...(this.row && this.row.fields) || []\n    ];\n  }\n\n  /**\n   * The name to reference this source is its name.\n   */\n  public getSource() {\n    return this.name;\n  }\n\n  private getChildIndependentFieldsWithStep() {\n    const childIndependentFieldsWithStep: ChildIndependentFieldsWithStep = {};\n\n    for (const channel of ['x', 'y'] as ScaleChannel[]) {\n      const childScaleComponent = this.childModel.component.scales[channel];\n      if (childScaleComponent && !childScaleComponent.merged) {\n        const type = childScaleComponent.get('type');\n        const range = childScaleComponent.get('range');\n\n        if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n          const domain = assembleDomain(this.childModel, channel);\n          const field = getFieldFromDomain(domain);\n          if (field) {\n            childIndependentFieldsWithStep[channel] = field;\n          } else {\n            log.warn('Unknown field for ${channel}.  Cannot calculate view size.');\n          }\n        }\n      }\n    }\n\n    return childIndependentFieldsWithStep;\n  }\n\n  private assembleRowColumnData(channel: 'row' | 'column', crossedDataName: string, childIndependentFieldsWithStep: ChildIndependentFieldsWithStep): VgData {\n    const childChannel = channel === 'row' ? 'y' : 'x';\n\n    const fields: string[] = [];\n    const ops: AggregateOp[] = [];\n    const as: string[] = [];\n\n    if (childIndependentFieldsWithStep[childChannel]) {\n      if (crossedDataName) {\n        // If there is a crossed data, calculate max\n        fields.push(`distinct_${childIndependentFieldsWithStep[childChannel]}`);\n\n        ops.push('max');\n      } else {\n        // If there is no crossed data, just calculate distinct\n        fields.push(childIndependentFieldsWithStep[childChannel]);\n        ops.push('distinct');\n      }\n      // Although it is technically a max, just name it distinct so it's easier to refer to it\n      as.push(`distinct_${childIndependentFieldsWithStep[childChannel]}`);\n    }\n\n    const {sortField, sortIndexField} = this[channel];\n    if (sortField) {\n      const {op, field} = sortField;\n      fields.push(field);\n      ops.push(op);\n      as.push(vgField(sortField));\n    } else if (sortIndexField) {\n      fields.push(sortIndexField);\n      ops.push('max');\n      as.push(sortIndexField);\n    }\n\n    return {\n      name: this[channel].name,\n      // Use data from the crossed one if it exist\n      source: crossedDataName || this.data,\n      transform: [{\n        type: 'aggregate',\n        groupby: this[channel].fields,\n        ...(fields.length ? {\n          fields, ops, as\n        } : {})\n      }]\n    };\n  }\n\n  public assemble() {\n    const data: VgData[] = [];\n    let crossedDataName = null;\n    const childIndependentFieldsWithStep = this.getChildIndependentFieldsWithStep();\n\n    if (this.column && this.row && (childIndependentFieldsWithStep.x || childIndependentFieldsWithStep.y)) {\n      // Need to create a cross dataset to correctly calculate cardinality\n      crossedDataName = `cross_${this.column.name}_${this.row.name}`;\n\n      const fields = [].concat(\n        childIndependentFieldsWithStep.x ? [childIndependentFieldsWithStep.x] : [],\n        childIndependentFieldsWithStep.y ? [childIndependentFieldsWithStep.y] : [],\n      );\n      const ops = fields.map((): AggregateOp => 'distinct');\n\n      data.push({\n        name: crossedDataName,\n        source: this.data,\n        transform: [{\n          type: 'aggregate',\n          groupby: [...this.column.fields, ...this.row.fields],\n          fields,\n          ops\n        }]\n      });\n    }\n\n    for (const channel of [COLUMN, ROW]) {\n      if (this[channel]) {\n        data.push(this.assembleRowColumnData(channel, crossedDataName, childIndependentFieldsWithStep));\n      }\n    }\n\n    return data;\n  }\n}\n"]}