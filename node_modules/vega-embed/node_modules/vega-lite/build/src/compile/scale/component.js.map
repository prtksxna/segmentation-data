{"version":3,"file":"component.js","sourceRoot":"","sources":["../../../../src/compile/scale/component.ts"],"names":[],"mappings":";AAIA,OAAO,EAAW,KAAK,EAAC,MAAM,UAAU,CAAC;AASzC;IAAoC,0CAA0B;IAK5D,wBAAY,IAAY,EAAE,gBAAqC;QAA/D,YACE,kBACE,EAAE,EAAM,+BAA+B;QACvC,EAAC,IAAI,MAAA,EAAC,CAAE,oCAAoC;SAC7C,SAEF;QAVM,YAAM,GAAG,KAAK,CAAC;QAEf,aAAO,GAAuB,EAAE,CAAC;QAOtC,KAAI,CAAC,eAAe,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC;;IACjD,CAAC;IACH,qBAAC;AAAD,CAAC,AAZD,CAAoC,KAAK,GAYxC","sourcesContent":["import {ScaleChannel} from '../../channel';\nimport {Scale, ScaleType} from '../../scale';\nimport {Omit} from '../../util';\nimport {VgNonUnionDomain, VgScale} from '../../vega.schema';\nimport {Explicit, Split} from '../split';\n\n/**\n * All VgDomain property except domain.\n * (We exclude domain as we have a special \"domains\" array that allow us merge them all at once in assemble.)\n */\n// TODO: also exclude domainRaw and property implement the right scaleComponent for selection domain\nexport type ScaleComponentProps = Omit<VgScale, 'domain'>;\n\nexport class ScaleComponent extends Split<ScaleComponentProps> {\n  public merged = false;\n\n  public domains: VgNonUnionDomain[] = [];\n\n  constructor(name: string, typeWithExplicit: Explicit<ScaleType>) {\n    super(\n      {},     // no initial explicit property\n      {name}  // name as initial implicit property\n    );\n    this.setWithExplicit('type', typeWithExplicit);\n  }\n}\n\n// Using Mapped Type to declare type (https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types)\nexport type ScaleComponentIndex = {[P in ScaleChannel]?: ScaleComponent};\n\nexport type ScaleIndex = {[P in ScaleChannel]?: Scale};\n"]}