{"version":3,"file":"layer.js","sourceRoot":"","sources":["../../../src/compile/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import {Config} from '../config';\nimport * as log from '../log';\nimport {isLayerSpec, isUnitSpec, LayoutSizeMixins, NormalizedLayerSpec} from '../spec';\nimport {flatten, keys} from '../util';\nimport {VgData, VgLayout, VgLegend, VgSignal, VgTitle} from '../vega.schema';\nimport {parseLayerAxis} from './axis/parse';\nimport {parseData} from './data/parse';\nimport {assembleLayoutSignals} from './layoutsize/assemble';\nimport {parseLayerLayoutSize} from './layoutsize/parse';\nimport {assembleLegends} from './legend/assemble';\nimport {Model} from './model';\nimport {RepeaterValue} from './repeater';\nimport {assembleLayerSelectionMarks} from './selection/selection';\nimport {UnitModel} from './unit';\n\n\nexport class LayerModel extends Model {\n  public readonly type: 'layer' = 'layer';\n\n  // HACK: This should be (LayerModel | UnitModel)[], but setting the correct type leads to weird error.\n  // So I'm just putting generic Model for now.\n  public readonly children: Model[];\n\n\n\n  constructor(spec: NormalizedLayerSpec, parent: Model, parentGivenName: string,\n    parentGivenSize: LayoutSizeMixins, repeater: RepeaterValue, config: Config, fit: boolean) {\n\n    super(spec, parent, parentGivenName, config, repeater, spec.resolve);\n\n    const layoutSize = {\n      ...parentGivenSize,\n      ...(spec.width ? {width: spec.width} : {}),\n      ...(spec.height ? {height: spec.height} : {})\n    };\n\n    this.initSize(layoutSize);\n\n    this.children = spec.layer.map((layer, i) => {\n      if (isLayerSpec(layer)) {\n        return new LayerModel(layer, this, this.getName('layer_'+i), layoutSize, repeater, config, fit);\n      }\n\n      if (isUnitSpec(layer)) {\n        return new UnitModel(layer, this, this.getName('layer_'+i), layoutSize, repeater, config, fit);\n      }\n\n      throw new Error(log.message.INVALID_SPEC);\n    });\n  }\n\n  public parseData() {\n    this.component.data = parseData(this);\n    for (const child of this.children) {\n      child.parseData();\n    }\n  }\n\n  public parseLayoutSize() {\n    parseLayerLayoutSize(this);\n  }\n\n  public parseSelection() {\n    // Merge selections up the hierarchy so that they may be referenced\n    // across unit specs. Persist their definitions within each child\n    // to assemble signals which remain within output Vega unit groups.\n    this.component.selection = {};\n    for (const child of this.children) {\n      child.parseSelection();\n      keys(child.component.selection).forEach((key) => {\n        this.component.selection[key] = child.component.selection[key];\n      });\n    }\n  }\n\n  public parseMarkGroup() {\n    for (const child of this.children) {\n      child.parseMarkGroup();\n    }\n  }\n\n  public parseAxisAndHeader() {\n    parseLayerAxis(this);\n  }\n\n  public assembleSelectionTopLevelSignals(signals: any[]): VgSignal[] {\n    return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);\n  }\n\n  // TODO: Support same named selections across children.\n  public assembleSelectionSignals(): VgSignal[] {\n    return this.children.reduce((signals, child) => {\n      return signals.concat(child.assembleSelectionSignals());\n    }, []);\n  }\n\n\n  public assembleLayoutSignals(): VgSignal[] {\n    return this.children.reduce((signals, child) => {\n      return signals.concat(child.assembleLayoutSignals());\n    }, assembleLayoutSignals(this));\n  }\n\n  public assembleSelectionData(data: VgData[]): VgData[] {\n    return this.children.reduce((db, child) => child.assembleSelectionData(db), data);\n  }\n\n  public assembleTitle(): VgTitle {\n    let title = super.assembleTitle();\n    if (title) {\n      return title;\n    }\n    // If title does not provide layer, look into children\n    for (const child of this.children) {\n      title = child.assembleTitle();\n      if (title) {\n        return title;\n      }\n    }\n    return undefined;\n  }\n\n  public assembleLayout(): VgLayout {\n    return null;\n  }\n\n  public assembleMarks(): any[] {\n    return assembleLayerSelectionMarks(this, flatten(this.children.map((child) => {\n      return child.assembleMarks();\n    })));\n  }\n\n  public assembleLegends(): VgLegend[] {\n    return this.children.reduce((legends, child) => {\n      return legends.concat(child.assembleLegends());\n    }, assembleLegends(this));\n  }\n}\n"]}