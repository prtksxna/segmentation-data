{"version":3,"file":"concat.js","sourceRoot":"","sources":["../../../src/compile/concat.ts"],"names":[],"mappings":";AACA,OAAO,KAAK,GAAG,MAAM,QAAQ,CAAC;AAC9B,OAAO,EAAC,aAAa,EAAuB,MAAM,SAAS,CAAC;AAE5D,OAAO,EAAC,eAAe,EAAC,MAAM,cAAc,CAAC;AAC7C,OAAO,EAAC,UAAU,EAAC,MAAM,cAAc,CAAC;AACxC,OAAO,EAAC,qBAAqB,EAAC,MAAM,oBAAoB,CAAC;AAIzD;IAAiC,uCAAe;IAO9C,qBAAY,IAA0B,EAAE,MAAa,EAAE,eAAuB,EAAE,QAAuB,EAAE,MAAc;QAAvH,YACE,kBAAM,IAAI,EAAE,MAAM,EAAE,eAAe,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,SAWrE;QAlBe,UAAI,GAAa,QAAQ,CAAC;QASxC,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,QAAQ,CAAC,EAAE;YAC/G,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC;SAChD;QAED,KAAI,CAAC,SAAS,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;QAErC,KAAI,CAAC,QAAQ,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,UAAC,KAAK,EAAE,CAAC;YAC/E,OAAO,UAAU,CAAC,KAAK,EAAE,KAAI,EAAE,KAAI,CAAC,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;QAClG,CAAC,CAAC,CAAC;;IACL,CAAC;IAEM,qCAAe,GAAtB;QACE,qBAAqB,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAGM,oCAAc,GAArB;QACE,OAAO,IAAI,CAAC;IACd,CAAC;IAES,2CAAqB,GAA/B;QACE,4BACK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAC,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IACvC,MAAM,EAAE,MAAM;YACd,wEAAwE;YACxE,KAAK,EAAE,MAAM,IACb;IACJ,CAAC;IACH,kBAAC;AAAD,CAAC,AAtCD,CAAiC,eAAe,GAsC/C","sourcesContent":["import {Config} from '../config';\nimport * as log from '../log';\nimport {isVConcatSpec, NormalizedConcatSpec} from '../spec';\nimport {VgLayout} from '../vega.schema';\nimport {BaseConcatModel} from './baseconcat';\nimport {buildModel} from './buildmodel';\nimport {parseConcatLayoutSize} from './layoutsize/parse';\nimport {Model} from './model';\nimport {RepeaterValue} from './repeater';\n\nexport class ConcatModel extends BaseConcatModel {\n  public readonly type: 'concat' = 'concat';\n\n  public readonly children: Model[];\n\n  public readonly isVConcat: boolean;\n\n  constructor(spec: NormalizedConcatSpec, parent: Model, parentGivenName: string, repeater: RepeaterValue, config: Config) {\n    super(spec, parent, parentGivenName, config, repeater, spec.resolve);\n\n    if (spec.resolve && spec.resolve.axis && (spec.resolve.axis.x === 'shared' || spec.resolve.axis.y === 'shared')) {\n      log.warn(log.message.CONCAT_CANNOT_SHARE_AXIS);\n    }\n\n    this.isVConcat = isVConcatSpec(spec);\n\n    this.children = (isVConcatSpec(spec) ? spec.vconcat : spec.hconcat).map((child, i) => {\n      return buildModel(child, this, this.getName('concat_' + i), undefined, repeater, config, false);\n    });\n  }\n\n  public parseLayoutSize() {\n    parseConcatLayoutSize(this);\n  }\n\n\n  public parseAxisGroup(): void {\n    return null;\n  }\n\n  protected assembleDefaultLayout(): VgLayout {\n    return {\n      ...(this.isVConcat ? {columns: 1} : {}),\n      bounds: 'full',\n      // Use align each so it can work with multiple plots with different size\n      align: 'each'\n    };\n  }\n}\n"]}