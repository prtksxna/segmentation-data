{"version":3,"file":"single.js","sourceRoot":"","sources":["../../../../src/compile/selection/single.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAC,MAAM,WAAW,CAAC;AAEtC,OAAO,EAAC,OAAO,IAAI,YAAY,EAAC,MAAM,SAAS,CAAC;AAChD,OAAO,EAAoB,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAC,MAAM,aAAa,CAAC;AAGtE,IAAM,MAAM,GAAqB;IAC/B,SAAS,EAAE,UAAU;IACrB,WAAW,EAAE,gBAAgB;IAE7B,OAAO,EAAE,YAAY;IAErB,eAAe,EAAE,UAAS,KAAK,EAAE,OAAO,EAAE,OAAO;QAC/C,IAAM,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,IAAI,KAAK,OAAO,CAAC,IAAI,EAAvB,CAAuB,CAAC,CAAC;QACjE,IAAM,IAAI,GAAG,UAAQ,WAAW,CAAC,OAAO,CAAC,IAAI,GAAG,KAAK,CAAC,MAAG,CAAC;QAC1D,IAAM,MAAM,GAAM,IAAI,eAAY,CAAC;QACnC,OAAO,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC;YACjD,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,MAAM,EAAK,IAAI,iBAAc;gBAC3B,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAG,CAAC,CAAC,KAAK,UAAK,MAAM,SAAI,CAAC,MAAG,EAA7B,CAA6B,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;SAChF,CAAC,CAAC;IACL,CAAC;IAED,UAAU,EAAE,UAAS,KAAK,EAAE,OAAO;QACjC,IAAM,GAAG,GAAG,OAAO,CAAC,IAAI,GAAG,KAAK,CAAC;QACjC,OAAO,GAAG,GAAG,IAAI;YACf,CAAC,OAAO,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,YAAU,QAAQ,CAAC,KAAK,CAAC,MAAG,CAAC,CAAC;IAC3E,CAAC;CACF,CAAC;AAEF,eAAe,MAAM,CAAC","sourcesContent":["import {stringValue} from 'vega-util';\n\nimport {signals as multiSignals} from './multi';\nimport {SelectionCompiler, STORE, TUPLE, unitName} from './selection';\n\n\nconst single:SelectionCompiler = {\n  predicate: 'vlSingle',\n  scaleDomain: 'vlSingleDomain',\n\n  signals: multiSignals,\n\n  topLevelSignals: function(model, selCmpt, signals) {\n    const hasSignal = signals.filter((s) => s.name === selCmpt.name);\n    const data = `data(${stringValue(selCmpt.name + STORE)})`;\n    const values = `${data}[0].values`;\n    return hasSignal.length ? signals : signals.concat({\n      name: selCmpt.name,\n      update: `${data}.length && {` +\n        selCmpt.project.map((p, i) => `${p.field}: ${values}[${i}]`).join(', ') + '}'\n    });\n  },\n\n  modifyExpr: function(model, selCmpt) {\n    const tpl = selCmpt.name + TUPLE;\n    return tpl + ', ' +\n      (selCmpt.resolve === 'global' ? 'true' : `{unit: ${unitName(model)}}`);\n  }\n};\n\nexport default single;\n"]}