{"version":3,"file":"repeater.js","sourceRoot":"","sources":["../../../src/compile/repeater.ts"],"names":[],"mappings":"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","sourcesContent":["import {isArray} from 'vega-util';\nimport {Encoding} from '../encoding';\nimport {FacetMapping} from '../facet';\nimport {Field, hasConditionalFieldDef, isConditionalDef, isFieldDef, isRepeatRef, ValueDef} from '../fielddef';\nimport {ChannelDef, ScaleFieldDef} from '../fielddef';\nimport * as log from '../log';\nimport {isSortField} from '../sort';\n\nexport type RepeaterValue = {\n  row?: string,\n  column?: string\n};\n\nexport function replaceRepeaterInFacet(facet: FacetMapping<Field>, repeater: RepeaterValue): FacetMapping<string> {\n  return replaceRepeater(facet, repeater) as FacetMapping<string>;\n}\n\nexport function replaceRepeaterInEncoding(encoding: Encoding<Field>, repeater: RepeaterValue): Encoding<string> {\n  return replaceRepeater(encoding, repeater) as Encoding<string>;\n}\n\n/**\n * Replaces repeated value and returns if the repeated value is valid.\n */\nfunction replaceRepeat<T extends {field?: Field}>(o: T, repeater: RepeaterValue): T {\n  if (isRepeatRef(o.field)) {\n    if (o.field.repeat in repeater) {\n      // any needed to calm down ts compiler\n      return {...o as any, field: repeater[o.field.repeat]};\n    } else {\n      log.warn(log.message.noSuchRepeatedValue(o.field.repeat));\n      return undefined;\n    }\n  }\n  return o;\n}\n\n/**\n * Replace repeater values in a field def with the concrete field name.\n */\nfunction replaceRepeaterInFieldDef(fieldDef: ScaleFieldDef<Field>, repeater: RepeaterValue): ScaleFieldDef<string> {\n  fieldDef = replaceRepeat(fieldDef, repeater);\n\n  if (fieldDef === undefined) {\n    // the field def should be ignored\n    return undefined;\n  }\n\n  if (fieldDef.sort && isSortField(fieldDef.sort)) {\n    const sort = replaceRepeat(fieldDef.sort, repeater);\n    fieldDef = {\n      ...fieldDef,\n      ...(sort ? {sort} : {})\n    };\n  }\n\n  return fieldDef as ScaleFieldDef<string>;\n}\n\nfunction replaceRepeaterInChannelDef(channelDef: ChannelDef<Field>, repeater: RepeaterValue): ChannelDef<string> {\n  if (isFieldDef(channelDef)) {\n    const fd = replaceRepeaterInFieldDef(channelDef, repeater);\n    if (fd) {\n      return fd;\n    } else if (isConditionalDef(channelDef)) {\n      return {condition: channelDef.condition};\n    }\n  } else {\n    if (hasConditionalFieldDef(channelDef)) {\n      const fd = replaceRepeaterInFieldDef(channelDef.condition, repeater);\n      if (fd) {\n        return {\n          ...channelDef,\n          condition: fd\n        } as ChannelDef<string>;\n      } else {\n        const {condition, ...channelDefWithoutCondition} = channelDef;\n        return channelDefWithoutCondition as ChannelDef<string>;\n      }\n    }\n    return channelDef as ValueDef;\n  }\n  return undefined;\n}\n\ntype EncodingOrFacet<F> = Encoding<F> | FacetMapping<F>;\n\nfunction replaceRepeater(mapping: EncodingOrFacet<Field>, repeater: RepeaterValue): EncodingOrFacet<string> {\n  const out: EncodingOrFacet<string> = {};\n  for (const channel in mapping) {\n    if (mapping.hasOwnProperty(channel)) {\n      const channelDef: ChannelDef<Field> | ChannelDef<Field>[] = mapping[channel];\n\n      if (isArray(channelDef)) {\n        // array cannot have condition\n        out[channel] = channelDef.map(cd => replaceRepeaterInChannelDef(cd, repeater))\n          .filter(cd => cd);\n      } else {\n        const cd = replaceRepeaterInChannelDef(channelDef, repeater);\n        if (cd) {\n          out[channel] = cd;\n        }\n      }\n    }\n  }\n  return out;\n}\n"]}