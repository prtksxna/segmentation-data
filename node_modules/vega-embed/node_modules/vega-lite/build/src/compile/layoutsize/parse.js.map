{"version":3,"file":"parse.js","sourceRoot":"","sources":["../../../../src/compile/layoutsize/parse.ts"],"names":[],"mappings":"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","sourcesContent":["import {defaultScaleConfig, hasDiscreteDomain} from '../../scale';\nimport {isVgRangeStep} from '../../vega.schema';\nimport {ConcatModel} from '../concat';\nimport {Model} from '../model';\nimport {Explicit, mergeValuesWithExplicit} from '../split';\nimport {UnitModel} from '../unit';\nimport {LayoutSize, LayoutSizeIndex} from './component';\n\nexport function parseLayerLayoutSize(model: Model) {\n  parseChildrenLayoutSize(model);\n\n  const layoutSizeCmpt = model.component.layoutSize;\n  layoutSizeCmpt.setWithExplicit('width', parseNonUnitLayoutSizeForChannel(model, 'width'));\n  layoutSizeCmpt.setWithExplicit('height', parseNonUnitLayoutSizeForChannel(model, 'height'));\n}\n\nexport const parseRepeatLayoutSize = parseLayerLayoutSize;\n\nexport function parseConcatLayoutSize(model: ConcatModel) {\n  parseChildrenLayoutSize(model);\n  const layoutSizeCmpt = model.component.layoutSize;\n\n  const sizeTypeToMerge = model.isVConcat ? 'width' : 'height';\n  layoutSizeCmpt.setWithExplicit(sizeTypeToMerge, parseNonUnitLayoutSizeForChannel(model, sizeTypeToMerge));\n}\n\nexport function parseChildrenLayoutSize(model: Model) {\n  for (const child of model.children) {\n    child.parseLayoutSize();\n  }\n}\n\nfunction parseNonUnitLayoutSizeForChannel(model: Model, sizeType: 'width' | 'height'): Explicit<LayoutSize> {\n  const channel = sizeType === 'width' ? 'x' : 'y';\n  const resolve = model.component.resolve;\n\n  let mergedSize: Explicit<LayoutSize>;\n  // Try to merge layout size\n  for (const child of model.children) {\n    const childSize = child.component.layoutSize.getWithExplicit(sizeType);\n    const scaleResolve = resolve.scale[channel];\n    if (scaleResolve === 'independent' && childSize.value === 'range-step') {\n      // Do not merge independent scales with range-step as their size depends\n      // on the scale domains, which can be different between scales.\n      mergedSize = undefined;\n      break;\n    }\n\n    if (mergedSize) {\n      if (scaleResolve === 'independent' && mergedSize.value !== childSize.value) {\n        // For independent scale, only merge if all the sizes are the same.\n        // If the values are different, abandon the merge!\n        mergedSize = undefined;\n        break;\n      }\n      mergedSize = mergeValuesWithExplicit<LayoutSizeIndex, LayoutSize>(\n        mergedSize, childSize, sizeType, ''\n      );\n    } else {\n      mergedSize = childSize;\n    }\n  }\n\n  if (mergedSize) {\n    // If merged, rename size and set size of all children.\n    for (const child of model.children) {\n      model.renameLayoutSize(child.getName(sizeType), model.getName(sizeType));\n      child.component.layoutSize.set(sizeType, 'merged', false);\n    }\n    return mergedSize;\n  } else {\n    // Otherwise, there is no merged size.\n    return {\n      explicit: false,\n      value: undefined\n    };\n  }\n}\n\nexport function parseUnitLayoutSize(model: UnitModel) {\n  const layoutSizeComponent = model.component.layoutSize;\n  if (!layoutSizeComponent.explicit.width) {\n    const width = defaultUnitSize(model, 'width');\n    layoutSizeComponent.set('width', width, false);\n  }\n\n  if (!layoutSizeComponent.explicit.height) {\n    const height = defaultUnitSize(model, 'height');\n    layoutSizeComponent.set('height', height, false);\n  }\n}\n\nfunction defaultUnitSize(model: UnitModel, sizeType: 'width' | 'height'): LayoutSize {\n  const channel = sizeType === 'width' ? 'x' : 'y';\n  const config = model.config;\n  const scaleComponent = model.getScaleComponent(channel);\n\n  if (scaleComponent) {\n    const scaleType = scaleComponent.get('type');\n    const range = scaleComponent.get('range');\n\n    if (hasDiscreteDomain(scaleType) && isVgRangeStep(range)) {\n      // For discrete domain with range.step, use dynamic width/height\n      return 'range-step';\n    } else {\n      return config.view[sizeType];\n    }\n  } else if (model.hasProjection) {\n    return config.view[sizeType];\n  } else {\n    // No scale - set default size\n    if (sizeType === 'width' && model.mark === 'text') {\n      // width for text mark without x-field is a bit wider than typical range step\n      return config.scale.textXRangeStep;\n    }\n\n    // Set width/height equal to rangeStep config or if rangeStep is null, use value from default scale config.\n    return config.scale.rangeStep || defaultScaleConfig.rangeStep;\n  }\n\n}\n"]}